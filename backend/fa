package org.example.backend.service.menu;

import lombok.RequiredArgsConstructor;
import org.example.backend.dto.menu.ComboDto;
import org.example.backend.entity.category.Categories;
import org.example.backend.entity.menu.Combo;
import org.example.backend.entity.menu.MenuItem;
import org.example.backend.entity.param.Param;
import org.example.backend.repository.category.CategoryRepository;
import org.example.backend.repository.menu.ComboRepository;
import org.example.backend.repository.menu.MenuItemRepository;
import org.example.backend.repository.param.ParamRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ComboService {

    private final ComboRepository comboRepository;
    private final CategoryRepository categoryRepository;
    private final MenuItemRepository menuItemRepository;
    private final ParamRepository paramRepository;

    // READ

    public List<ComboDto> findAll() {
        return comboRepository.findAll()
                .stream()
                .map(ComboDto::new)
                .collect(Collectors.toList());
    }

    public Optional<ComboDto> findById(Long id) {
        return comboRepository.findById(id).map(ComboDto::new);
    }

    public ComboDto getById(Long id) {
        return comboRepository.findById(id)
                .map(ComboDto::new)
                .orElseThrow(() -> new RuntimeException("Combo not found"));
    }

    // CREATE / UPDATE

    public ComboDto save(ComboDto dto) {
        Combo entity = toEntity(dto);
        entity = comboRepository.save(entity); // triggers @PrePersist for price
        return new ComboDto(entity);
    }

    public ComboDto updateById(Long id, ComboDto dto) {
        Combo entity = comboRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Combo not found"));

        entity.setName(dto.getName());
        entity.setDescription(dto.getDescription());
        entity.setDiscountPercent(dto.getDiscountPercent());
        entity.setAvailable(dto.getAvailable());

        // === TYPE CATEGORY ===
        if (dto.getTypeCategoryId() != null) {
            Categories type = categoryRepository.findById(dto.getTypeCategoryId())
                    .orElseThrow(() -> new RuntimeException("Type category not found"));
            entity.setTypeCategory(type);
        }

        // === MULTIPLE AVAILABILITY CATEGORIES ===
        if (dto.getAvailabilityCategoryIds() != null && !dto.getAvailabilityCategoryIds().isEmpty()) {
            List<Categories> availabilities = categoryRepository.findAllById(dto.getAvailabilityCategoryIds());
            entity.setAvailabilityCategories(availabilities);
        }

        // === PEOPLE CATEGORY ===
        if (dto.getPeopleCategoryId() != null) {
            Categories people = categoryRepository.findById(dto.getPeopleCategoryId())
                    .orElseThrow(() -> new RuntimeException("People category not found"));
            entity.setPeopleCategory(people);
        }

        // === STATUS (Param) ===
        if (dto.getStatusId() != null) {
            Param status = paramRepository.findById(dto.getStatusId())
                    .orElseThrow(() -> new RuntimeException("Status not found"));
            entity.setStatus(status);
        }

        // === MENU ITEMS ===
        if (dto.getMenuItemIds() != null && !dto.getMenuItemIds().isEmpty()) {
            List<MenuItem> items = menuItemRepository.findAllById(dto.getMenuItemIds());
            entity.setMenuItems(items);
        }

        // price recalculated automatically on save
        entity = comboRepository.save(entity);
        return new ComboDto(entity);
    }

    // DELETE

    public void deleteById(Long id) {
        Combo entity = comboRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Combo not found"));
        comboRepository.delete(entity);
    }

    // HELPER: Convert DTO â†’ Entity

    private Combo toEntity(ComboDto dto) {
        Combo entity = new Combo();
        entity.setId(dto.getId());
        entity.setName(dto.getName());
        entity.setDescription(dto.getDescription());
        entity.setDiscountPercent(dto.getDiscountPercent());
        entity.setAvailable(dto.getAvailable());

        // === TYPE CATEGORY ===
        if (dto.getTypeCategoryId() != null) {
            Categories type = categoryRepository.findById(dto.getTypeCategoryId())
                    .orElseThrow(() -> new RuntimeException("Type category not found"));
            entity.setTypeCategory(type);
        }

        // === MULTIPLE AVAILABILITY CATEGORIES ===
        if (dto.getAvailabilityCategoryIds() != null && !dto.getAvailabilityCategoryIds().isEmpty()) {
            List<Categories> availabilities = categoryRepository.findAllById(dto.getAvailabilityCategoryIds());
            entity.setAvailabilityCategories(availabilities);
        }

        // === PEOPLE CATEGORY ===
        if (dto.getPeopleCategoryId() != null) {
            Categories people = categoryRepository.findById(dto.getPeopleCategoryId())
                    .orElseThrow(() -> new RuntimeException("People category not found"));
            entity.setPeopleCategory(people);
        }

        // === STATUS (Param) ===
        if (dto.getStatusId() != null) {
            Param status = paramRepository.findById(dto.getStatusId())
                    .orElseThrow(() -> new RuntimeException("Status not found"));
            entity.setStatus(status);
        }

        // === MENU ITEMS ===
        if (dto.getMenuItemIds() != null && !dto.getMenuItemIds().isEmpty()) {
            List<MenuItem> items = menuItemRepository.findAllById(dto.getMenuItemIds());
            entity.setMenuItems(items);
        }

        // price auto-calculated before persist/update
        return entity;
    }
}
