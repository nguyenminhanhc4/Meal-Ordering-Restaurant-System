// src/services/cart/cartService.ts
import api from "../../api/axios";
import type { ApiResponse } from "../types/ApiType";
import { AxiosError } from "axios";

/* -------------------------------------------------------------------------- */
/* üß© Interface models                                                        */
/* -------------------------------------------------------------------------- */

/** D·ªØ li·ªáu g·ª≠i khi th√™m s·∫£n ph·∫©m v√†o gi·ªè */
export interface CartItemPayload {
  menuItemId: number;
  quantity: number;
}

/** M√≥n trong gi·ªè h√†ng */
export interface CartItem {
  id: number;
  menuItemId: number;
  menuItemName?: string;
  avatarUrl?: string;
  quantity: number;
  price?: number;
  status: string;
  description?: string;
  categoryName?: string;
  availableQuantity: number;
}

/** Gi·ªè h√†ng ng∆∞·ªùi d√πng */
export interface Cart {
  id: number;
  userId: number;
  status: string;
  createdAt?: string;
  updatedAt?: string;
  items?: CartItem[];
}

/** Payload ƒë·ªÉ xo√° nhi·ªÅu m√≥n ho·∫∑c gi·ªè h√†ng */
export interface CartDeleteRequest {
  cartId?: number;
  itemIds?: number[];
}

/* -------------------------------------------------------------------------- */
/* üß≠ API FUNCTIONS                                                           */
/* -------------------------------------------------------------------------- */

/**
 * üîπ L·∫•y gi·ªè h√†ng hi·ªán t·∫°i c·ªßa user
 */
export const getCurrentCart = async (): Promise<Cart> => {
  const res = await api.get<ApiResponse<Cart>>("/carts/current", {
    withCredentials: true,
  });
  return res.data.data;
};

/**
 * üîπ T·∫°o m·ªõi gi·ªè h√†ng cho user (n·∫øu ch∆∞a c√≥)
 */
export const createCart = async (): Promise<Cart> => {
  const res = await api.post<ApiResponse<Cart>>(
    "/carts",
    {},
    { withCredentials: true }
  );
  return res.data.data;
};

export const getOrCreateCart = async (): Promise<Cart> => {
  try {
    const cart = await getCurrentCart();
    return cart;
  } catch (err: unknown) {
    if (err instanceof AxiosError && err.response?.status === 404) {
      console.log("No open cart found ‚Üí creating new cart...");
      const newCart = await createCart();
      return newCart;
    }
    throw err;
  }
};

/**
 * üîπ Th√™m m√≥n v√†o gi·ªè h√†ng
 * @param cartId id c·ªßa gi·ªè h√†ng
 * @param item th√¥ng tin m√≥n (menuItemId, quantity)
 */
export const addItemToCart = async (
  cartId: number,
  item: CartItemPayload
): Promise<Cart> => {
  const res = await api.post<ApiResponse<Cart>>(
    `/cart-items/${cartId}/items`,
    item,
    {
      withCredentials: true,
    }
  );
  return res.data.data;
};

/**
 * üîπ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng m√≥n trong gi·ªè
 */
export const updateCartItem = async (
  itemId: number,
  quantity: number
): Promise<Cart> => {
  const res = await api.put<ApiResponse<Cart>>(
    `/cart-items/${itemId}`,
    { quantity },
    { withCredentials: true }
  );
  return res.data.data;
};

/**
 * üîπ X√≥a nhi·ªÅu m√≥n trong gi·ªè (ho·∫∑c to√†n b·ªô gi·ªè)
 */
export const deleteCartItems = async (
  payload: CartDeleteRequest
): Promise<void> => {
  await api.delete<ApiResponse<void>>("/cart-items", {
    data: payload,
    withCredentials: true,
  });
};

/**
 * üîπ Thanh to√°n gi·ªè h√†ng (v√≠ d·ª•: checkout to√†n b·ªô ho·∫∑c theo itemIds)
 */
export const checkoutCart = async (
  cartId: number,
  itemIds?: number[]
): Promise<void> => {
  await api.post<ApiResponse<void>>(
    `/carts/${cartId}/checkout`,
    { itemIds },
    { withCredentials: true }
  );
};
